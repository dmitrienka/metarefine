#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
require 'stringio'
require 'green_shoes'
require 'topas-tools'


Shoes.app :width => 400, :height => 800  do

  @log = StringIO.new
  @log.write "k1\tR_wp\tMax dev.\tMultiplier\tOutlier\n"
    
  #base flow
  flow  :margin=>10 do

    title 'ToparunGUI'    

    #big stack
    stack do
      caption 'Your system:'
      @systemlist = list_box items:['wine','windows','dummy'], choose:'windows' 

      caption 'Your Topas4-2 directory:'
      
      #small flow 
      flow do
        @topasdir = edit_line
        button 'Open' do
          @topasdir.text = ask_open_folder
        end
      end
      #\small flow
      
      caption  "Points and steps"
      flow do
        para "Points:"
        @pointline = edit_line
        @pointline.text = "100,16,0"
      end

      flow do
        para "Steps:"
        @stepsline = edit_line
        @stepsline.text = "4,1"
      end
      caption "Your input file"
      flow do
        @inpline = edit_line
        button 'open' do
          @inpline.text = ask_open_file
        end
      end

      button 'Go!' do
        begin
          points = @pointline.text.split(/[,\s]+/).map(&:to_f)
          steps  = @stepsline.text.split(/[,\s]+/).map(&:to_f)
        rescue alert("Some issues with steps'n'points!")
        end
        
        Thread.new(points, steps, @log ) do  |points, steps|

          inp    = @inpline.text
          dir    = File.expand_path  File.dirname inp
          name   = File.basename(inp, File.extname(inp))
          text   = IO.read(inp,  :encoding => "UTF-8")
          engine = TopasEngine.create  @systemlist.text.to_sym, @topasdir.text
          input  = TopasInput.new text, name
          steps  = Steps.new points, steps
          runner = Metarefine.new engine, input, dir, steps 
          runner.toparun BaseAnalyzer.new(@log)

          @clear = button 'Clear' do
            @log = StringIO.new
            @clear.clear
          end
        end
      end
  
      caption "Log:"
      stack :width => 370,   :margin => 20 do
 
 
         @paralog = para
        every 1  do |i|
          a =  @log.string
          @paralog.text = a  unless @paralog.text == a
        flush
        end
      end


    end
  end
end


